taskKey="com.codegym.games.minesweeper.part13"\n\nMinesweeper (Part 13/16)

The game is won when the number of remaining hidden cells is equal to the number of mines. To count the number
of hidden cells, we&#39;ll introduce another variable whose initial value is equal to the total number of cells on the
playing field. The value of this variable will decrease as the cells are revealed. When it becomes equal to the
number of mines, the game is won.
In the event of a win, our game currently does nothing, but it should. It&#39;s time to fix that.
Let&#39;s write a win() method that stops the game and displays a beautiful congratulatory message to the winner.

Run the game and check that the win() method is run when the player wins.
Note that the win() method is called if the number of hidden cells is equal to the number of mines on the field.
However, if the last revealed cell is a mine, then the method must not be called.


Требования:
1.	The MinesweeperGame class must have a private int countClosedTiles field that is initialized to SIDE * SIDE when it is declared.
2.	The openTile(int, int) method must decrease the countClosedTiles field by 1 if the gameField element&#39;s isOpen flag is set.
3.	The MinesweeperGame class must have a private void win() method.
4.	The win() method must set the isGameStopped variable to true.
5.	The win() method must call the showMessageDialog(Color, String, Color, int) method.
6.	The openTile(int, int) method must call the win() method if the number of hidden cells is equal to the number of mines on the field and the last revealed cell is not a mine.


Minesweeper (Part 13/16)

A cell can be revealed only once. If a cell is flagged, it must not be revealed.
And, of course, cells shouldn&#39;t be revealed after the game has stopped. Account for all of these points
in the openTile(int, int) method. Now you need to be sure that everything works correctly &mdash; start the game and check.



Minesweeper (Part 13/16)

In almost any game, the player either wins or loses. Let&#39;s first implement the logic for losing.
To do this, we need a gameOver() method that will stop the game and inform the player about the loss.
To display a message to the player, the engine has a showMessageDialog() method.
To track whether the game has stopped, we introduce a special isGameStopped flag. When
does the player lose? That&#39;s right: when a mined cell is revealed. If this
happens, you need to repaint the cell red (Color.RED) and call the gameOver() method.
Don&#39;t forget to check whether the game has stopped in the markTile(int, int) method. Run the game and check that everything you&#39;ve
implemented works.



Minesweeper (Part 13/16)

Now let&#39;s tackle the method responsible for flagging a cell. We&#39;ll call it markTile.
It must:
- mark a cell on the playing field with a flag, or remove a flag from a cell;
- track the number of flags;
- handle drawing and erasing flags on the playing field;
- change the a cell&#39;s color if a flag is being set and restore the original color if a flag is being removed.
You can set or remove a flag in the game by clicking the right mouse button. Therefore, in the MinesweeperGame class,
you need to override the Game class&#39;s onMouseRightClick(int, int) method and call the markTile(int x, int y) method.
Check that everything works &mdash; run the game.



Minesweeper (Part 13/16)

According to the rules, when a cell without adjacent mines is revealed,
the game reveals the &quot;unmined&quot; area up to cells with mined
neighbors. Let&#39;s implement it... I suggest using recursion. It is used
when the algorithm for solving the problem is the same as the algorithm for solving part of the problem. Here&#39;s what we have.
When a cell with zero mined neighbors is revealed, we need to do a full search of all
neighboring cells that haven&#39;t been revealed, call openTile(int, int) method on them, and repeat the process.
Additionally, in the openTile(int, int) method, we&#39;ll arrange to display the number of mined neighbors of a cell.
Run the game to verify that the implementation is correct.
Hint: if you get a java.lang.StackOverflowError, it means that you&#39;re setting the isOpen flag too late.



Minesweeper (Part 13/16)

The rules of the game provide flags to help the player. They are needed to
mark cells that might be mined. Accordingly, the number of flags (countFlags) must be equal to
the number of mines (countMinesOnField). You need to show flags somehow on the playing field. To do this, we&#39;ll create
a constant to hold the symbol that represents them. Each cell in the model must have an
isFlag field that will tell us whether a cell is flagged.



