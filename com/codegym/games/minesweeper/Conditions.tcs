taskKey="com.codegym.games.minesweeper.part15"\n\nMinesweeper (Part 15/16)

As you know, a real minesweeper is mistaken only once. But, fortunately, we can make lots of mistakes in our game.
Let&#39;s implement a way to restart the game. To do this, we&#39;ll create a restart() method, where we will start
the game, and reset the number of hidden cells, mines, and
points. Don&#39;t forget to update the score on the playing field and call the method responsible for creating a game.
In the restart method(), you also need to clear the flags, mines, numbers, etc. from the playing field. We&#39;ll restart the game
by clicking the left mouse button.


Требования:
1.	The MinesweeperGame class must have a private void restart() method.
2.	The restart() method must assign false to the isGameStopped field.
3.	The isGameStopped field must not be assigned in the createGame() method.
4.	The restart() method must restore the initial values of the countClosedTiles, score, and countMinesOnField fields.
5.	The restart() method must call the setScore(int) method.
6.	The restart() method must call the createGame() method after setting the initial values of the countClosedTiles, score and countMinesOnField fields.
7.	The createGame() method must clear all items (flags, mines, numbers) from the playing field. Use the setCellValue(int, int, String) method. Pass an empty string as the last argument.
8.	The onMouseLeftClick(int, int) method must call the restart() method and do nothing if the game is stopped.


Minesweeper (Part 15/16)

Admit it &mdash; It&#39;s not very interesting to play without a score. Let&#39;s add this functionality to our game. We will need a variable
to track points. When an unmined cell is revealed, the score increases by 5 points.
To display the score on the playing field, we need to use the Game class&#39;s setScore() method,
to which we will pass the total number of points. Note that you need to call this method after increasing the score &mdash;
otherwise the wrong result will be shown.
Run the game and try to get the maximum number of points.



Minesweeper (Part 15/16)

The game is won when the number of remaining hidden cells is equal to the number of mines. To count the number
of hidden cells, we&#39;ll introduce another variable whose initial value is equal to the total number of cells on the
playing field. The value of this variable will decrease as the cells are revealed. When it becomes equal to the
number of mines, the game is won.
In the event of a win, our game currently does nothing, but it should. It&#39;s time to fix that.
Let&#39;s write a win() method that stops the game and displays a beautiful congratulatory message to the winner.

Run the game and check that the win() method is run when the player wins.
Note that the win() method is called if the number of hidden cells is equal to the number of mines on the field.
However, if the last revealed cell is a mine, then the method must not be called.



Minesweeper (Part 15/16)

A cell can be revealed only once. If a cell is flagged, it must not be revealed.
And, of course, cells shouldn&#39;t be revealed after the game has stopped. Account for all of these points
in the openTile(int, int) method. Now you need to be sure that everything works correctly &mdash; start the game and check.



Minesweeper (Part 15/16)

In almost any game, the player either wins or loses. Let&#39;s first implement the logic for losing.
To do this, we need a gameOver() method that will stop the game and inform the player about the loss.
To display a message to the player, the engine has a showMessageDialog() method.
To track whether the game has stopped, we introduce a special isGameStopped flag. When
does the player lose? That&#39;s right: when a mined cell is revealed. If this
happens, you need to repaint the cell red (Color.RED) and call the gameOver() method.
Don&#39;t forget to check whether the game has stopped in the markTile(int, int) method. Run the game and check that everything you&#39;ve
implemented works.



Minesweeper (Part 15/16)

Now let&#39;s tackle the method responsible for flagging a cell. We&#39;ll call it markTile.
It must:
- mark a cell on the playing field with a flag, or remove a flag from a cell;
- track the number of flags;
- handle drawing and erasing flags on the playing field;
- change the a cell&#39;s color if a flag is being set and restore the original color if a flag is being removed.
You can set or remove a flag in the game by clicking the right mouse button. Therefore, in the MinesweeperGame class,
you need to override the Game class&#39;s onMouseRightClick(int, int) method and call the markTile(int x, int y) method.
Check that everything works &mdash; run the game.



